defmodule ArduinoML.Transpiler do

  alias ArduinoML.Application, as: Application
  
  def to_code(application) when is_map(application) do
    "// generated by ArduinoML #elixir."
    |> new_line
    
    |> comment("Bricks <~> Pins.")
    |> bricks(application.sensors ++ application.actuators)
    |> new_line
    
    |> comment("Setup the inputs and outputs).")
    |> setup(application.sensors, application.actuators)
    |> new_line

    |> comment("Static setup code.")
    |> static_setup
    |> new_line

    |> comment("States.")
    |> states(application.transitions, application.states)
    
    |> comment("The loop specify the first state.")
    |> loop_function(Application.initial(application))
  end

  defp comment(current, comment) do
    (current |> new_line) <> "// " <> comment
  end
  
  defp bricks(current, []), do: current
  defp bricks(current, [%{label: label, pin: pin} | other_bricks]) do
    current
    |> brick(label, pin)
    |> bricks(other_bricks)
  end

  defp brick(current, name, pin) do
    (current |> new_line) <> "int " <> label(name) <> " = " <> pin(pin) <> ";"
  end

  defp setup(current, sensors, actuators) do
    sensors_code = Enum.map(sensors, fn %{label: name, pin: _} -> setup_line(name, "INPUT") end)
    actuators_code = Enum.map(actuators, fn %{label: name, pin: _} -> setup_line(name, "OUTPUT") end)

    body = Enum.reduce(sensors_code ++ [""] ++ actuators_code, fn (line, acc) -> acc <> "\n" <> line end)
    
    (current |> new_line) <> "void setup() {\n" <> body <> "\n}"
  end

  defp setup_line(brick_label, status), do: "  pinMode(" <> label(brick_label) <> ", " <> status <> ");"

  defp static_setup(current) do
    (current |> new_line) <> "int state = LOW;\nint prev = HIGH;\nlong time = 0;\nlong debounce = 200;"
  end

  defp states(current, _, []), do: current
  defp states(current, transitions, [state | other_states]) do
    current
    |> state(transitions, state)
    |> states(transitions, other_states)
  end

  defp state(current, transitions, state) do
    function_name = state_function_name(state)

    actions_lines = Enum.map(state.actions,
      fn action -> "  digitalWrite(" <> label(action.label) <> ", " <> label(action.signal) <> ");" end)
    guard_line = "  boolean guard = millis() - time > debounce;"

    transitions_lines = transitions_code("", true,
      Enum.filter(transitions, fn (t) -> t.from == state.label end)) <>
      " else {\n    " <> state_function_name(state) <> "();\n  }"

    body = Enum.reduce(actions_lines ++ [guard_line, "", transitions_lines],
      fn (line, acc) -> acc <> "\n" <> line end)
    
    (current |> new_line) <> "void " <> function_name <> "() {\n" <> body <> "\n}\n"
  end

  defp transitions_code(current, _, []), do: current
  defp transitions_code(current, is_first, [transition | other_transitions]) do
    current
    |> transition_code(transition, is_first)
    |> transitions_code(false, other_transitions)
  end

  defp transition_code(current, transition, is_first) do
    condition = transition.on
    |> Enum.map(fn (assertion) -> assertion_code(assertion) end)
    |> Enum.reduce(fn (subcondition, acc) -> acc <> " && " <> subcondition end)
    
    content = "    time = millis();\n    state_" <> (transition.to |> label |> String.downcase) <> "();"
    code = " " <> conditional_keyword(is_first) <> " (" <> condition <> " && guard) {\n" <> content <> "\n  }"
    
    (current) <> code
  end

  defp assertion_code(%{label: name, signal: signal}) do
    "digitalRead(" <> label(name) <> ") == " <> label(signal)
  end

  defp conditional_keyword(false), do: "else if"
  defp conditional_keyword(true), do: " if"
  
  defp state_function_name(state), do: "state_" <> (state.label |> label |> String.downcase)

  defp loop_function(current, initial) do
    (current |> new_line) <> "void loop() {\n  state_" <> (initial |> label |> String.downcase)  <> "();\n}"
  end
          
  defp new_line(current), do: current <> "\n"

  defp label(label) when is_atom(label), do: label |> Atom.to_string |> String.upcase
  defp label(label) when is_binary(label), do: String.upcase(label)

  defp pin(value) when is_integer(value), do: Integer.to_string(value)
  
end
